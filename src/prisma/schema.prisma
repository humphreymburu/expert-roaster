generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model User {
    id                String   @id @default(cuid())
    fullName          String
    email             String   @unique
    bio               String?
    expertiseAreas    String[]
    country           String?
    region            String?
    isVerified        Boolean  @default(false)
    yearsExperience   Int?
    projectsCompleted Int      @default(0)
    responseRate      Float?
    lastActive        DateTime @updatedAt
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt

    // Relations
    languages      Language[]
    certifications Certification[]
    documents      Document[]
    experiences    Experience[]
    skills         Skill[]
    education      Education[]
    publications   Publication[]
    references   Reference[]
}

model Language {
    id          String   @id @default(cuid())
    name        String
    proficiency String
    userId      String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Certification {
    id                 String    @id @default(cuid())
    title              String
    issuer             String
    issueDate          DateTime
    expiryDate         DateTime?
    verificationStatus String
    documentUrl        String?
    userId             String
    createdAt          DateTime  @default(now())
    updatedAt          DateTime  @updatedAt
    user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Document {
    id                 String   @id @default(cuid())
    type               String
    title              String
    fileUrl            String
    verificationStatus String
    uploadDate         DateTime @default(now())
    userId             String
    createdAt          DateTime @default(now())
    updatedAt          DateTime @updatedAt
    user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Experience {
    id           String    @id @default(cuid())
    role         String
    organization String
    location     String?
    startDate    DateTime
    endDate      DateTime?
    current      Boolean   @default(false)
    description  String?
    skills       String[]
    userId       String
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt
    user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Skill {
    id           String   @id @default(cuid())
    name         String
    category     String
    level        String
    endorsements Int      @default(0)
    userId       String
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Education {
    id          String   @id @default(cuid())
    degree      String
    field       String
    institution String
    year        String
    userId      String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Publication {
    id        String   @id @default(cuid())
    title     String
    journal   String
    year      String
    url       String?
    userId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Reference {
    id           String   @id @default(cuid())
    name         String
    position     String
    organization String
    email        String
    phone        String
    relationship String
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId       String
}
